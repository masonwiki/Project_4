import psycopg2
import json
from datetime import datetime

# Subreddits to include
#desired_subreddits = [
#    "stocks", "dividends", "Entrepreneur", "investing",
#    "Superstonk", "options", "personalfinance", "Economics",
#    "Forex", "StockMarket", "CryptoCurrency", "Trading",
#    "Investor", "algotrading", "Daytrading", "Etoro",
#    "stocktraders", "Economics", "ValueInvesting"
#]

timeframe = '2015-01'
sql_transaction = []

# Database connection parameters
db_params = {
    "dbname": "Project_4",
    "user": "postgres",
    "password": "postgres",
    "host": "localhost"
}

# Establish a connection
connection = psycopg2.connect(**db_params)
cursor = connection.cursor()


print("before table")

# Prepare the SQL query template
def create_table():
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS public.parent_reply (
            parent_id TEXT PRIMARY KEY,
            comment_id TEXT UNIQUE,
            parent TEXT,
            comment TEXT,
            subreddit TEXT,
            unix INT,
            score INT
        )
    """)

print("post table")


# Coding cleanup, reddit includes \n for new lines and \r for return. We are also replacing double quotes with single quotes so our AI has less confusion
def formatted(data):
    data = data.replace("\n", " newlinechar ").replace("\r", " newlinechar ").replace('"', "'")
    return data

#Here we are making sure the body of the replies are not too short/long or dont consist of deleted or removed characters.
def acceptable(data):
    if len (data.split(' ')) > 50 or len(data) < 1:
        return False
    elif len(data) > 1000:
        return False
    elif data == '[deleted]' or data == '[removed]':
        return False
    else: 
        return True


def find_parent(pid): 
    try:
        sql = "SELECT comment FROM parent_reply WHERE comment_id = '{}' LIMIT 1".format(pid)
        cursor.execute(sql)
        result = cursor.fetchone()
        if result is not None:
            return result[0]
        else:
            return False
    except Exception as e:
        print("Error executing SQL query:", str(e))
        connection.rollback()  # Rollback the transaction to clear the aborted state
        return False
    
def find_existing_score(pid):
    try:
        sql = "SELECT score FROM parent_reply WHERE parent_id = '{}' LIMIT 1".format(pid)
        cursor.execute(sql)
        result = cursor.fetchone()
        if result is not None:
            return result[0]
        else: return False
    except Exception as e:
        return False

def transaction_bldr(sql):
    global sql_transaction
    sql_transaction.append(sql)
    if len(sql_transaction) > 10000:
        # Iterate through the data and insert into the database for desired subreddits
        # Begin a transaction
        cursor.execute("BEGIN TRANSACTION;")
        for s in sql_transaction:
            try:
                cursor.execute(s)
            except:
                pass
        connection.commit()
        sql_transaction = []

def sql_insert_replace_comment(commentid, parentid, parent, comment, subreddit, time, score):
    try:
        sql = """UPDATE parent_reply SET parent_id = '{}', comment_id = '{}', parent = '{}', comment = '{}', subreddit = '{}', unix = {}, score = {} WHERE parent_id = '{}';""".format(parentid, commentid, parent, comment, subreddit, time, score, parentid)
        transaction_bldr(sql)
    except Exception as e:
        print('s-UPDATE insertion', str(e))

def sql_insert_has_parent(commentid, parentid, parent, comment, subreddit, time, score):
    try:
        sql = """INSERT INTO parent_reply (parent_id, comment_id, parent, comment, subreddit, unix, score) VALUES ('{}', '{}', '{}', '{}', '{}', {}, {});""".format(commentid, parentid, parent, comment, subreddit, time, score)
        transaction_bldr(sql)
    except Exception as e:
        print('s-PARENT insertion', str(e))

def sql_insert_no_parent(commentid, parentid, comment, subreddit, time, score):
    try:
        sql = """INSERT INTO parent_reply (parent_id, comment_id, comment, subreddit, unix, score) VALUES ('{}', '{}', '{}', '{}', {}, {});""".format(parentid, commentid, comment, subreddit, time, score)
        transaction_bldr(sql)
    except Exception as e:
        print('s-NO_PARENT insertion', str(e))

if __name__ == "__main__":
    create_table()
    row_counter = 0
    paired_rows = 0

    print("post table")
    print("post table")

    # Load in data
    with open("D:/Users/Mason/Reddit_Comments/RC_2015-01.txt".format(timeframe.split('-')[0], timeframe), buffering=1000) as file:
        for row in file:
            row_counter += 1
            row = json.loads(row)
            parent_id = row['parent_id']
            body = formatted(row['body'])
            created_utc = row['created_utc']
            score = row['score']
            subreddit = row['subreddit']
            comment_id = row['name']

            parent_data = find_parent(parent_id)
            if score >= 2:
                if acceptable(body):
                    existing_comment_score = find_existing_score(parent_id)
                    if existing_comment_score:
                        if score > existing_comment_score:
                            sql_insert_replace_comment(comment_id, parent_id, parent_data, body, subreddit, created_utc, score)
                    else:
                        if parent_data:
                            sql_insert_has_parent(comment_id, parent_id, parent_data, body, subreddit, created_utc, score)
                            paired_rows += 1
                        else:
                            sql_insert_no_parent(comment_id, parent_id, body, subreddit, created_utc, score)

            if row_counter % 100000 == 0:
                print("Total rows read: {}, Paired rows: {}, Time: {}".format(row_counter, paired_rows, str(datetime.now())))

    cursor.close()
    connection.commit()  # Commit any remaining transactions
    connection.close()